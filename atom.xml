<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Steel.Liao&#39;s Blog</title>
  
  <subtitle>清风朗月不用一钱买</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lbbs.me/"/>
  <updated>2018-01-02T08:57:47.000Z</updated>
  <id>http://lbbs.me/</id>
  
  <author>
    <name>Steel.Liao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工欲善其事，必先利其器</title>
    <link href="http://lbbs.me/2013/usefull-tools/"/>
    <id>http://lbbs.me/2013/usefull-tools/</id>
    <published>2013-11-07T07:54:00.000Z</published>
    <updated>2018-01-02T08:57:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>一年多没写博客了，这里已经荒草丛生了吧，赶紧清理清理，以后必须得努力了。</p><p>这篇文章会介绍我日常所使用的一些非常好的工具，也算是给以后重装系统后可以快速恢复环境所做的一个记录吧。</p><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><p>文本编辑利器，没深入使用过vim，所以就不拿来比较了，就我以前用过的一些编辑器而言，实在是太强大了，而且非常轻量，不会打开个编辑器，让你电脑卡半天（知道我说谁吧，哈哈）。</p><p>Sublime Text2支持各种流行编程语言的语法高亮和代码补全等（不支持也可以通过插件实现，比如LESS，md等），它还有着很多其他编辑器没有的超酷的特性，自定义插件什么的就不说了，现代编辑器必备啊。就说最常用的特性吧，有多行（处）编辑、快速跳转及查找、项目管理、代码片段snippet、宏、build系统、丰富的插件。</p><a id="more"></a><p>我的插件列表：Package Control，DocBlockr，Emmet，JsFormat，MarkdownEditing，PlainTasks，Tag等</p><p>参考信息：</p><ul><li><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">官网</a></li><li><a href="http://www.iplaysoft.com/sublimetext.html" target="_blank" rel="noopener">Sublime Text 2 - 性感无比的代码编辑器！</a></li></ul><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>Chrome作为一个浏览器真的是太好用了，尤其是其开发者工具对前端开发的效率提升是非常明显的。其插件非常丰富，而且很方便。美中不足的是其安装及自动更新很蛋疼，很多时候需要翻墙才行，不过可以下载完整包。</p><p>推荐的插件：</p><ul><li><a href="https://chrome.google.com/webstore/detail/script-injector/gidddlfmjhjiibffpalikbecknoflfab" target="_blank" rel="noopener">Script Injector</a></li><li><a href="https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm" target="_blank" rel="noopener">Proxy Switchysharp</a></li><li><a href="http://www.quickmark.com.tw/En/basic/index.asp" target="_blank" rel="noopener">Quick Mark QR</a></li><li><a href="https://chrome.google.com/webstore/detail/screen-capture-by-google/cpngackimfmofbokmjmljamhdncknpmg" target="_blank" rel="noopener">Screen Capture</a></li></ul><p>参考链接：</p><ul><li><a href="http://chrome.google.com" target="_blank" rel="noopener">官网</a></li><li><a href="https://developers.google.com/chrome-developer-tools/" target="_blank" rel="noopener">开发者工具</a></li><li><a href="http://devework.com/google-chrome-developer-tools-tutorial.html" target="_blank" rel="noopener">一个使用开发者工具的教程</a></li></ul><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>Git 作为一个版本管理系统是非常不错的，比起svn其好处可多多了。还有其客户端带的git bash也非常好用，包含了很多Linux上的命令行（安装的时候需要手动选择），用起来非常方便。</p><p>参考链接：</p><ul><li><a href="http://git-scm.com/" target="_blank" rel="noopener">官网</a></li><li><a href="http://git-scm.com/book" target="_blank" rel="noopener">Pro Git</a></li><li><a href="http://gitref.cyj.me/zh/index.html" target="_blank" rel="noopener">Git 参考手册</a></li></ul><h3 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h3><p>作为一个diff工具真的是非常强大，不过是付费软件。最开始是试用，后来试用期结束了，就想找一个替代工具，但是一直没有找到一个相当的工具，都是些非常弱的工具，没办法只好网上找了一个注册码（这个软件很贵呀）。</p><p>公司试用svn来管理代码，所以我svn的默认diff工具就是Beyond Compare，而且一般上线前都会用它来对比一下将要上线的代码和线上代码的差异，review一遍后再上线，这样往往可以发现一些非常弱智的bug。</p><p>Beyond Compare 还有个非常好的功能，就是可以直接对比压缩包的内容，它会自己解压缩对比，非常方便。</p><p>参考链接：<a href="http://www.scootersoftware.com/" target="_blank" rel="noopener">官网</a></p><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><p>node.js 作为服务器脚本已经越来越受到大家的认可了，而且它的命令行工具非常好用，做一些自定义工具也非常方便。比如我自己有开发过<a href="https://npmjs.org/package/easyserver" target="_blank" rel="noopener">easyserver</a>（一个非常方便创建静态服务器的工具）和<a href="https://npmjs.org/package/ipaddr" target="_blank" rel="noopener">ipaddr</a>（一个查看当前ip的工具）。</p><p>其工具的安装方式也很方便，只需要使用<code>npm install</code>即可，而且也可以很方便的向npm提交自己的代码。现在npm上已经有非常多的模块及工具可以使用了，而<a href="http://gruntjs.com/" target="_blank" rel="noopener">Grunt</a>是一个非常强大的工具，在项目build上非常好用，强烈推荐。</p><p>参考链接：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">node.js官网</a></li><li><a href="https://npmjs.org/" target="_blank" rel="noopener">npm</a></li></ul><h3 id="Fiddler"><a href="#Fiddler" class="headerlink" title="Fiddler"></a>Fiddler</h3><p>Fiddler 简直就是前端调试神器啊，它是一款免费而且功能强大的数据包抓取软件。它通过代理的方式获取程序http通讯的数据，可以用其检测网页和服务器的交互情况，能够记录所有客户端和服务器间的http请求，支持监视、设置断点、甚至修改输入输出数据等功能。fiddler包含了一个强大的基于事件脚本的子系统，并且能够使用.net框架语言扩展。</p><p>当你需要一个代理的时候可以用它；当你需要调试网络请求的时候可以用它；当你需要转发请求的时候可以用它；当你需要模拟慢网速的时候可以用它；当你需要跟着网络请求详情的时候可以用它……</p><p>参考链接：</p><ul><li><a href="http://fiddler2.com/" target="_blank" rel="noopener">官网</a></li><li><a href="http://www.cnblogs.com/tankxiao/archive/2012/02/06/2337728.html" target="_blank" rel="noopener">一个教程</a></li></ul><h3 id="Clover"><a href="#Clover" class="headerlink" title="Clover"></a>Clover</h3><p>Clover 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。其主题可以直接使用Chrome的主题，而且快捷键也是一样的哦，非常好用。</p><p>参考链接：<a href="http://cn.ejie.me/" target="_blank" rel="noopener">官网</a></p><h3 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h3><p>Everything是速度最快的文件名搜索软件。其速度之快令人震惊，百G硬盘几十万个文件，可以在几秒钟之内完成索引；文件名搜索瞬间呈现结果。它小巧免费，支持中文，支持正则表达式，可以通过HTTP或FTP分享搜索结果。如果不满意Windows自带的搜索工具、Total Commander的搜索、Google 桌面搜索或百度硬盘搜索，如果正在使用或放弃了Locate32，都值得推荐这款体积小巧、免安装、免费、速度极快（比Locate32更快）的文件搜索工具Everything！</p><p>参考链接：</p><ul><li><a href="http://www.voidtools.com/" target="_blank" rel="noopener">官网</a></li><li><a href="http://xbeta.info/everything-search-tool.htm" target="_blank" rel="noopener">一个教程</a></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>就说到这了，以后遇到了好工具再继续添加吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一年多没写博客了，这里已经荒草丛生了吧，赶紧清理清理，以后必须得努力了。&lt;/p&gt;
&lt;p&gt;这篇文章会介绍我日常所使用的一些非常好的工具，也算是给以后重装系统后可以快速恢复环境所做的一个记录吧。&lt;/p&gt;
&lt;h3 id=&quot;Sublime-Text&quot;&gt;&lt;a href=&quot;#Sublime-Text&quot; class=&quot;headerlink&quot; title=&quot;Sublime Text&quot;&gt;&lt;/a&gt;Sublime Text&lt;/h3&gt;&lt;p&gt;文本编辑利器，没深入使用过vim，所以就不拿来比较了，就我以前用过的一些编辑器而言，实在是太强大了，而且非常轻量，不会打开个编辑器，让你电脑卡半天（知道我说谁吧，哈哈）。&lt;/p&gt;
&lt;p&gt;Sublime Text2支持各种流行编程语言的语法高亮和代码补全等（不支持也可以通过插件实现，比如LESS，md等），它还有着很多其他编辑器没有的超酷的特性，自定义插件什么的就不说了，现代编辑器必备啊。就说最常用的特性吧，有多行（处）编辑、快速跳转及查找、项目管理、代码片段snippet、宏、build系统、丰富的插件。&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://lbbs.me/categories/programming/"/>
    
    
      <category term="tools" scheme="http://lbbs.me/tags/tools/"/>
    
      <category term="software" scheme="http://lbbs.me/tags/software/"/>
    
      <category term="program" scheme="http://lbbs.me/tags/program/"/>
    
  </entry>
  
  <entry>
    <title>node.js是如何支持命令行工具开发的</title>
    <link href="http://lbbs.me/2012/how-nodejs-command-line-work/"/>
    <id>http://lbbs.me/2012/how-nodejs-command-line-work/</id>
    <published>2012-10-18T12:10:00.000Z</published>
    <updated>2018-01-02T08:57:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次写了一篇文章（用node.js开发命令行工具）介绍如何使用node.js开发命令行工具，那么node.js是如何支持命令行工具开发呢？这篇文章就介绍一下吧。</p><p>首先node.js是如何执行js就不说了，直接进入<code>shebang</code>和<code>npm link</code>这两个东西。首先是<code>shebang</code>，node.js是通过这个指令来知道这段代码需要运行在任何目录，而且不需要使用node指令。而<code>npm link</code>就是根据文件有没有加<code>shebang</code>来做相应处理的，如果文件第一行有<code>shebang</code>的话，npm就会根据package.json文件，使模块可以在全局运行，而且不需要加node指令。npm做的事情其实很简单，就是在npm的目录下添加了相应模块的cmd文件，假设一个模块叫做<code>test</code>，那么npm就会在其目录（可能为：<code>C:\Documents and Settings\Administrator\Application Data\npm</code>，可以输出path看下npm的路径）下生成一个<code>test.cmd</code>文件，而npm目录是在环境变量中的，cmd文件又是可执行文件，所以就可以在任何地方运行<code>test.cmd</code>文件了。那么<code>test.cmd</code>文件内容又是什么呢？其实也很简单，就是一段让node执行指定js文件的代码。下面的代码可能就是<code>test.cmd</code>文件的内容了：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">:: Created by npm, please don<span class="string">'t edit manually.</span></span><br><span class="line"><span class="string">@IF EXIST "%~dp0\node.exe" (</span></span><br><span class="line"><span class="string">    "%~dp0\node.exe"  "%~dp0\node_modules\test\test.js" %*</span></span><br><span class="line"><span class="string">) ELSE (</span></span><br><span class="line"><span class="string">    node  "%~dp0\node_modules\test\test.js" %*</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure><p>上面的代码是windows脚本，就是说当前目录如果有node.exe的话，就用当前目录下的node.exe执行当前目录下的<code>node_modulestesttest.js</code>文件。如果否则用node（环境变量中）执行这个文件。</p><p>在npm的目录中还能找到一个没有后缀的test文件，那这个文件又是干什么的呢？打开文件可以看到如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">basedir=`dirname <span class="string">"<span class="variable">$0</span>"</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> `uname` <span class="keyword">in</span></span><br><span class="line">        *CYGWIN*) basedir=`cygpath -w <span class="string">"<span class="variable">$basedir</span>"</span>`;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -x <span class="string">"<span class="variable">$basedir</span>/node"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="string">"<span class="variable">$basedir</span>/node"</span>  <span class="string">"<span class="variable">$basedir</span>/node_modules/test/test.js"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">    ret=$?</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    node  <span class="string">"<span class="variable">$basedir</span>/node_modules/test/test.js"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">    ret=$?</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$ret</span></span><br></pre></td></tr></table></figure><p>显然这是针对Linux的代码，跟Windows下的代码功能基本一样。</p><p>好了，就说到这里了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次写了一篇文章（用node.js开发命令行工具）介绍如何使用node.js开发命令行工具，那么node.js是如何支持命令行工具开发呢？这篇文章就介绍一下吧。&lt;/p&gt;
&lt;p&gt;首先node.js是如何执行js就不说了，直接进入&lt;code&gt;shebang&lt;/code&gt;和&lt;code&gt;npm link&lt;/code&gt;这两个东西。首先是&lt;code&gt;shebang&lt;/code&gt;，node.js是通过这个指令来知道这段代码需要运行在任何目录，而且不需要使用node指令。而&lt;code&gt;npm link&lt;/code&gt;就是根据文件有没有加&lt;code&gt;shebang&lt;/code&gt;来做相应处理的，如果文件第一行有&lt;code&gt;shebang&lt;/code&gt;的话，npm就会根据package.json文件，使模块可以在全局运行，而且不需要加node指令。npm做的事情其实很简单，就是在npm的目录下添加了相应模块的cmd文件，假设一个模块叫做&lt;code&gt;test&lt;/code&gt;，那么npm就会在其目录（可能为：&lt;code&gt;C:\Documents and Settings\Administrator\Application Data\npm&lt;/code&gt;，可以输出path看下npm的路径）下生成一个&lt;code&gt;test.cmd&lt;/code&gt;文件，而npm目录是在环境变量中的，cmd文件又是可执行文件，所以就可以在任何地方运行&lt;code&gt;test.cmd&lt;/code&gt;文件了。那么&lt;code&gt;test.cmd&lt;/code&gt;文件内容又是什么呢？其实也很简单，就是一段让node执行指定js文件的代码。下面的代码可能就是&lt;code&gt;test.cmd&lt;/code&gt;文件的内容了：&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://lbbs.me/categories/programming/"/>
    
    
      <category term="JavaScript" scheme="http://lbbs.me/tags/JavaScript/"/>
    
      <category term="node.js" scheme="http://lbbs.me/tags/node-js/"/>
    
      <category term="command line" scheme="http://lbbs.me/tags/command-line/"/>
    
  </entry>
  
  <entry>
    <title>用node.js开发命令行工具</title>
    <link href="http://lbbs.me/2012/commandline-nodejs/"/>
    <id>http://lbbs.me/2012/commandline-nodejs/</id>
    <published>2012-10-13T12:10:00.000Z</published>
    <updated>2018-01-02T08:57:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="node-js简介"><a href="#node-js简介" class="headerlink" title="node.js简介"></a>node.js简介</h3><p>Node让你可以用javascript编写服务器端程序，让javascript脱离web浏览器的限制，像C#、JAVA、Python等语言一样在服务器端运行，这也让一些熟悉Javascript的前端开发人员进军到服务器端开发提供了一个便利的途径。Node是基于Google的V8引擎封装的，并提供了一些编写服务器程序的常用接口，例如文件流的处理。Node的目的是提供一种简单的途径来编写高性能的网络程序。</p><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>node.js除了做服务器端程序，其实还可以做很多事情，其中就包括开发命令行工具。本文就介绍一下怎样使用Node来开发命令行工具。</p><p>今天需要创建一个显示当前文件夹下的所以文件和文件夹名。</p><a id="more"></a><p>首先创建一个文件夹叫nodefolder，然后新建一个nodefolder.js的文件，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>),</span><br><span class="line">    path = process.cwd();</span><br><span class="line"></span><br><span class="line">fs.readdir(path, <span class="function"><span class="keyword">function</span>(<span class="params">err, files</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i += <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(files[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在已经可以用node来运行这个js文件了，下面是运行截图：</p><img src="/2012/commandline-nodejs/jietu.png"><p>已经成功运行了，那接下来我们该怎么办呢，首先需要在文件头部添加一行，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>),</span><br><span class="line">    path = process.cwd();</span><br><span class="line"></span><br><span class="line">fs.readdir(path, <span class="function"><span class="keyword">function</span>(<span class="params">err, files</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i += <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(files[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的<code>#! /usr/bin/env node</code>被称为shebang，表示用后面的路径所示的程序来执行当前文件。然后我们需要新建一个package.json文件，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"nodefoler"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"List all the files in a directory!"</span>,</span><br><span class="line">    <span class="attr">"preferGlobal"</span>: <span class="string">"true"</span>,</span><br><span class="line">    <span class="attr">"bin"</span>: &#123; <span class="attr">"nf"</span>: <span class="string">"nodefolder.js"</span> &#125;,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"steel1990"</span>,</span><br><span class="line">    <span class="attr">"engines"</span>: &#123; <span class="attr">"node"</span>: <span class="string">"*"</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的bin字段中，nf是命令行的名字，nodefolder.js是要执行的文件，然后需要使用npm来使命令nf可以在整个系统下执行。在当前目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure><p>这样一个命令行工具就完成了，而且你对上面的文件进行任何修改都会立即有效。下面是截图：</p><img src="/2012/commandline-nodejs/end.png"><p>nodefolder已经完美运行了，通过npm可以快速将创建的命令行工具发布(npm publish)到网上，而需要的用户也可以很快速的获取(npm install)。</p><p>注：node最好更新到最新版本。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.hacksparrow.com/commandline-node-js-scripts-utilities-modules.html" target="_blank" rel="noopener">Command line Node.js Programs / Scripts / Utilities / Modules</a><br><a href="http://nodejs.org/" target="_blank" rel="noopener">node.js官网</a><br><a href="https://npmjs.org/" target="_blank" rel="noopener">npm官网</a><br><a href="http://cnodejs.org/" target="_blank" rel="noopener">node.js中文社区</a><br><a href="http://en.wikipedia.org/wiki/Shebang" target="_blank" rel="noopener">shebang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;node-js简介&quot;&gt;&lt;a href=&quot;#node-js简介&quot; class=&quot;headerlink&quot; title=&quot;node.js简介&quot;&gt;&lt;/a&gt;node.js简介&lt;/h3&gt;&lt;p&gt;Node让你可以用javascript编写服务器端程序，让javascript脱离web浏览器的限制，像C#、JAVA、Python等语言一样在服务器端运行，这也让一些熟悉Javascript的前端开发人员进军到服务器端开发提供了一个便利的途径。Node是基于Google的V8引擎封装的，并提供了一些编写服务器程序的常用接口，例如文件流的处理。Node的目的是提供一种简单的途径来编写高性能的网络程序。&lt;/p&gt;
&lt;h3 id=&quot;命令行工具&quot;&gt;&lt;a href=&quot;#命令行工具&quot; class=&quot;headerlink&quot; title=&quot;命令行工具&quot;&gt;&lt;/a&gt;命令行工具&lt;/h3&gt;&lt;p&gt;node.js除了做服务器端程序，其实还可以做很多事情，其中就包括开发命令行工具。本文就介绍一下怎样使用Node来开发命令行工具。&lt;/p&gt;
&lt;p&gt;今天需要创建一个显示当前文件夹下的所以文件和文件夹名。&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://lbbs.me/categories/programming/"/>
    
    
      <category term="JavaScript" scheme="http://lbbs.me/tags/JavaScript/"/>
    
      <category term="node.js" scheme="http://lbbs.me/tags/node-js/"/>
    
      <category term="command line" scheme="http://lbbs.me/tags/command-line/"/>
    
  </entry>
  
  <entry>
    <title>关于Unicode 65279</title>
    <link href="http://lbbs.me/2012/unicode-65279/"/>
    <id>http://lbbs.me/2012/unicode-65279/</id>
    <published>2012-04-09T12:10:00.000Z</published>
    <updated>2018-01-02T08:57:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天碰到一个很诡异的问题，在客户端使用js将一段html插入一个<code>div(div.innerHTML=html)</code>的时候多出了一个空行。下面在Google chrome里面模拟一下昨天的情况，截图如下：</p><img src="/2012/unicode-65279/65279.png"><a id="more"></a><p>后来我就获取了这个元素，看了下这个空行是什么，测试流程如下：</p><img src="/2012/unicode-65279/65279_2.png"><p>当看到比较结果是false的时候被震到了，后来找了下65279的相关资料。65279的十六进制表示为FEFF，它是字节顺序标记（英语：byte-order mark，BOM）是位于码点U+FEFF的统一码字符的名称。当以UTF-16或UTF-32来将UCS/统一码字符所组成的字串编码时，这个字符被用来标示其字节序。它常被用来当做标示文件是以UTF-8、UTF-16或UTF-32编码的记号。(via:<a href="http://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F" target="_blank" rel="noopener">wikipedia</a>)</p><p>在notepad++中可以设置文件的编码格式，我的默认设置是UTF-8编码格式，这个格式会默认给添加上<strong>BOM</strong>，而UTF-8无BOM格式则不会添加这个BOM。其实昨天引发这个问题的原因就是，我用模板的方式构造页面，而模板文件使用的是UTF-8编码格式，获取的时候自然就带上了这个BOM。这个BOM有的时候会使浏览器以怪异模式进行渲染，这样就会有更多的问题了。因为BOM是针对于UTF-16和UTF-32的，对于使用UTF-8编码格式的文件不需要BOM，所以在保存UTF-8文件是最好选择无BOM的编码。</p><p>然后unicode中还有其他的一些空白字符和部分非打印字符也会导致这种问题，不过遇到的机会很少。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html" target="_blank" rel="noopener">字符集和字符编码（Charset &amp; Encoding）</a><br><a href="http://zh.wikipedia.org/wiki/%E7%A9%BA%E6%A0%BC" target="_blank" rel="noopener">空格</a><br><a href="http://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6" target="_blank" rel="noopener">控制字符</a><br><a href="http://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F" target="_blank" rel="noopener">字节顺序标记</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天碰到一个很诡异的问题，在客户端使用js将一段html插入一个&lt;code&gt;div(div.innerHTML=html)&lt;/code&gt;的时候多出了一个空行。下面在Google chrome里面模拟一下昨天的情况，截图如下：&lt;/p&gt;
&lt;img src=&quot;/2012/unicode-65279/65279.png&quot;&gt;
    
    </summary>
    
      <category term="programming" scheme="http://lbbs.me/categories/programming/"/>
    
    
      <category term="JavaScript" scheme="http://lbbs.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript通过对象字面量来创建类(型)</title>
    <link href="http://lbbs.me/2011/js-create-class-with-object-literal/"/>
    <id>http://lbbs.me/2011/js-create-class-with-object-literal/</id>
    <published>2011-11-15T13:16:00.000Z</published>
    <updated>2018-01-02T08:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间浏览<a href="http://www.nczonline.net/" target="_blank" rel="noopener">Nicholas C. Zakas</a>大神的博客，发现一篇很有意思的文章，是Nicholas在看了github上的一个<a href="https://gist.github.com/1329619" target="_blank" rel="noopener">gist</a>（<a href="https://gist.github.com/jashkenas" target="_blank" rel="noopener">jashkenas</a>对JavaScript使用简洁方式创建类的建议）之后写的，主要内容是介绍了一种通过对象字面量来创建类型的方法，下面来说一下吧。</p><p>首先贴上jashkenas的伪代码</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(hex) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public r = <span class="number">1</span>;</span><br><span class="line">  public g = <span class="number">1</span>;</span><br><span class="line">  public b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  copy(color) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  setRGB(r, g, b) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  setHSV(h, s, v) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的类使用构造器和原型方式很容易就可以实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span>(<span class="params">hex</span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Color.prototype.r = <span class="number">1</span>;</span><br><span class="line">Color.prototype.g = <span class="number">1</span>;</span><br><span class="line">Color.prototype.b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">Color.prototype.copy = <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line">Color.prototype.setRGB = <span class="function"><span class="keyword">function</span>(<span class="params">r,g,b</span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line">Color.prototype.setHSV = <span class="function"><span class="keyword">function</span>(<span class="params">h,s,v</span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是上面的实现，不大优雅，下面就有了更优雅的实现方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">details</span>)</span>&#123;</span><br><span class="line">  details.constructor.prototype = details;</span><br><span class="line">  <span class="keyword">return</span> details.constructor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Color = type(&#123;</span><br><span class="line">  <span class="keyword">constructor</span> : function(hex) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  r: <span class="number">1</span>, <span class="attr">g</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">  copy: <span class="function"><span class="keyword">function</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  setRGB: <span class="function"><span class="keyword">function</span>(<span class="params">r, g, b</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  setHSV: <span class="function"><span class="keyword">function</span>(<span class="params">h, s, v</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> mycolor = <span class="keyword">new</span> Color(<span class="string">"ffffff"</span>);</span><br></pre></td></tr></table></figure><p>type函数很简单，但很优美。看起来很接近最上面的伪代码，也很好的将类的声明封装到一起了。其关键就是理解constructor属性，构造器原型的constructor属性一般情况下都是指向该构造器的。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f === f.prototype.constructor);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>而在type函数中通过将传入的对象字面量赋给constructor的原型来实现该循环，然后将constructor返回给调用者，实现了类型的创建。而上面的方法跟下面使用原型方式创建类有一点相似之处：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span>(<span class="params">hex</span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">Color.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span> : Color,</span><br><span class="line">  r : 1, g : 1, b : 1,</span><br><span class="line">  copy : function(color)&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  setRGB: <span class="function"><span class="keyword">function</span>(<span class="params">r, g, b</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  setHSV: <span class="function"><span class="keyword">function</span>(<span class="params">h, s, v</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过还是type函数实现的更加优美简洁。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.nczonline.net/blog/2011/11/04/custom-types-classes-using-object-literals-in-javascript/" target="_blank" rel="noopener">Custom types (classes) using object literals in JavaScript</a><br><a href="http://wiki.ecmascript.org/doku.php?id=harmony:classes" target="_blank" rel="noopener">harmony classes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间浏览&lt;a href=&quot;http://www.nczonline.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nicholas C. Zakas&lt;/a&gt;大神的博客，发现一篇很有意思的文章，是Nicholas在看了github上的一个&lt;a href=&quot;https://gist.github.com/1329619&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gist&lt;/a&gt;（&lt;a href=&quot;https://gist.github.com/jashkenas&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jashkenas&lt;/a&gt;对JavaScript使用简洁方式创建类的建议）之后写的，主要内容是介绍了一种通过对象字面量来创建类型的方法，下面来说一下吧。&lt;/p&gt;
&lt;p&gt;首先贴上jashkenas的伪代码&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://lbbs.me/categories/programming/"/>
    
    
      <category term="JavaScript" scheme="http://lbbs.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>几个笔试、面试题</title>
    <link href="http://lbbs.me/2011/some-Interview-questions/"/>
    <id>http://lbbs.me/2011/some-Interview-questions/</id>
    <published>2011-11-01T13:16:00.000Z</published>
    <updated>2018-01-02T08:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间去上海参加校园招聘会了，就把期间遇到的几个笔试和面试题跟大家分享一下。</p><h3 id="证明：如果一个数介于孪生素数之间且大于等于6，则这个数是6的倍数"><a href="#证明：如果一个数介于孪生素数之间且大于等于6，则这个数是6的倍数" class="headerlink" title="证明：如果一个数介于孪生素数之间且大于等于6，则这个数是6的倍数"></a>证明：如果一个数介于<a href="http://zh.wikipedia.org/wiki/%E5%AD%AA%E7%94%9F%E7%B4%A0%E6%95%B0" target="_blank" rel="noopener">孪生素数</a>之间且大于等于6，则这个数是6的倍数</h3><p>这个问题面试的时候没想出来，想了很久，后来一次在等地铁的时候突然想到了怎么证明。这个问题的证明其实是很简单的，既然是孪生素数之间的数，那么这个数必然是偶数了。因为这两个素数必然是奇数，而介于两个奇数之间的数肯定是偶数啦，即这个数能被2整除了，接下来就只需要证明这个数能被3整除就可以了。</p><p>假设这个数是Y，两个素数分别是X,<code>Z(5&lt;=X&lt;Z)</code>，则有<code>Z-X=2</code>, <code>X=Y-1</code>, <code>Z=Y+1</code>，即X、Y、Z三个数是连续的。而三个连续的数中必有一个是3的倍数，又X、Z都是素数，即X、Z都不能被3整除，所以Y一定能被3整除，最终得出Y能被6整除，即Y是6的倍数。</p><a id="more"></a><h3 id="实现double-pow-double-x-int-y-函数"><a href="#实现double-pow-double-x-int-y-函数" class="headerlink" title="实现double pow(double x,int y)函数"></a>实现double pow(double x,int y)函数</h3><p>这个问题也很简单，不过细节很重要，有以下情况需要判断：<code>x=0, y=0, y&lt;0</code>。下面给代码了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> result = <span class="number">1.0</span>;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">if</span>(y &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; y;i++)&#123;</span><br><span class="line">      result *= x;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);<span class="comment">//终止程序</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    result = <span class="number">1</span> / <span class="built_in">pow</span>(x,-y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然了，上面的实现可以换成非递归，然后大家可以想一想怎么实现<code>double pow(double x,double y)</code>函数。</p><h3 id="输出一个字符串中字符的所有排序序列"><a href="#输出一个字符串中字符的所有排序序列" class="headerlink" title="输出一个字符串中字符的所有排序序列"></a>输出一个字符串中字符的所有排序序列</h3><p>这个问题也挺简单的，就是对字符重新组合。可以使用递归的思想来考虑，首先取出这个字符串的第一个字符，然后对剩下的字符串求所有排列，再将刚才的字符插入到每个字符串中的每一个位置(这句话不知道表达清楚了没)。例如：对字符串<code>abc</code>,先取出第一个字符a，然后对剩下的字符串<code>bc</code>，求其所有排列（<code>bc</code>,<code>cb</code>），然后将a插入到<code>bc</code>和<code>cb</code>中，得到<code>abc</code>，<code>bac</code>，<code>bca</code>，<code>acb</code>，<code>cab</code>，<code>cba</code>共六种排列。下面给出代码(JavaScirpt)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showAllSort</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAllSort</span>(<span class="params">str</span>) </span>&#123; <span class="comment">//获取函数定义</span></span><br><span class="line">        <span class="keyword">if</span> (str.length &lt; = <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">            obj[str] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> allSort = &#123;&#125;, <span class="comment">//保存当前str的所有排列</span></span><br><span class="line">            firstChar = str.slice(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">            <span class="comment">//获取移除第一个字符后的所有排列</span></span><br><span class="line">            subSort = getAllSort(str.slice(<span class="number">1</span>, str.length));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> substr <span class="keyword">in</span> subSort) &#123; <span class="comment">//插入第一个字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = substr.length; i &lt;= l; i++) &#123;</span><br><span class="line">                allSort[substr.slice(<span class="number">0</span>, i) + firstChar + substr.slice(i, l)] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> allSort;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> str == <span class="string">"string"</span> || str <span class="keyword">instanceof</span> <span class="built_in">String</span> || <span class="built_in">Object</span>.prototype.toString.call(str) == <span class="string">"[object String]"</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> allSort = getAllSort(str),</span><br><span class="line">            fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> s <span class="keyword">in</span> allSort) &#123;</span><br><span class="line">            <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">            p.innerHTML = s;</span><br><span class="line">            fragment.appendChild(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"strSort"</span>).appendChild(fragment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个实现中，使用了js对象的动态性，可以随时添加js对象的属性，即类似hashmap的特性，不会重复保存相同的排列。然后其中并没有对实现进行优化，没有对字符串进行分析（如有相同字符时的重复计算）。而递归实现也太耗费内存了，尤其是在浏览器中，很容易导致栈溢出等问题。还有在一个对象上添加很多属性应该也会引起性能问题，对于一个没有重复字符长度为10的字符串，其所有排列的个数是<code>10!=3628800</code>，太恐怖了！</p><p>所以上面我给的方法都不是最好的，所以我也还要继续研究算法啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间去上海参加校园招聘会了，就把期间遇到的几个笔试和面试题跟大家分享一下。&lt;/p&gt;
&lt;h3 id=&quot;证明：如果一个数介于孪生素数之间且大于等于6，则这个数是6的倍数&quot;&gt;&lt;a href=&quot;#证明：如果一个数介于孪生素数之间且大于等于6，则这个数是6的倍数&quot; class=&quot;headerlink&quot; title=&quot;证明：如果一个数介于孪生素数之间且大于等于6，则这个数是6的倍数&quot;&gt;&lt;/a&gt;证明：如果一个数介于&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%AD%AA%E7%94%9F%E7%B4%A0%E6%95%B0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;孪生素数&lt;/a&gt;之间且大于等于6，则这个数是6的倍数&lt;/h3&gt;&lt;p&gt;这个问题面试的时候没想出来，想了很久，后来一次在等地铁的时候突然想到了怎么证明。这个问题的证明其实是很简单的，既然是孪生素数之间的数，那么这个数必然是偶数了。因为这两个素数必然是奇数，而介于两个奇数之间的数肯定是偶数啦，即这个数能被2整除了，接下来就只需要证明这个数能被3整除就可以了。&lt;/p&gt;
&lt;p&gt;假设这个数是Y，两个素数分别是X,&lt;code&gt;Z(5&amp;lt;=X&amp;lt;Z)&lt;/code&gt;，则有&lt;code&gt;Z-X=2&lt;/code&gt;, &lt;code&gt;X=Y-1&lt;/code&gt;, &lt;code&gt;Z=Y+1&lt;/code&gt;，即X、Y、Z三个数是连续的。而三个连续的数中必有一个是3的倍数，又X、Z都是素数，即X、Z都不能被3整除，所以Y一定能被3整除，最终得出Y能被6整除，即Y是6的倍数。&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://lbbs.me/categories/programming/"/>
    
    
      <category term="算法" scheme="http://lbbs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>一个数的二进制位反转</title>
    <link href="http://lbbs.me/2011/reverse-binary-number/"/>
    <id>http://lbbs.me/2011/reverse-binary-number/</id>
    <published>2011-09-25T13:29:00.000Z</published>
    <updated>2018-01-02T08:57:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>前天参加汇顶科技的笔试，最后一道编程题是求一个数的二进制表示反序后的值，例如10的二进制表示是0000 1010，反序后是0101 0000，十进制值是80。题目给的函数签名是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">reverse</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> var)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚开始想到的肯定是用除2余和除2来算出所有位来咯。不过又想了一下，感觉这样做太水了，就想能不能用位运算来实现，想了一段时间后，终于想到可以用”按位与运算”和”移位运算”来求出某一位上是什么。例如要求低位起第二位就可以是：<code>num &amp; (1 &lt;&lt; 1)</code>。因为1左移1位就是<code>00000010</code>，跟它做按位与运算，得出的就只剩下num的低位起的第二位了。然后再将这一位移到对称位上，即<code>cache &lt;&lt; 5</code>(假设上面的运算得到的结果是cache)，得出<code>01000000</code>（悲剧的是我当初忘记反转了！）。然后对每一位都这样处理就行了。下面给出实现代码（JavaScript实现，假设8位）：</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, cache, result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        cache = num &amp; (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            cache &lt;&lt;= <span class="number">7</span> - <span class="number">2</span> * i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cache &gt;&gt;= <span class="number">2</span> * i - <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result += cache;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，顺便也给出使用除2余和除2方法实现的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, len, numArray, result = <span class="number">0</span>;</span><br><span class="line">    numArray = [];</span><br><span class="line">    <span class="comment">//分解位</span></span><br><span class="line">    <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">        numArray.push(num % <span class="number">2</span>);</span><br><span class="line">        num = <span class="built_in">parseInt</span>(num / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面反转</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, len = numArray.length; i &lt; len; i++) &#123;</span><br><span class="line">        result += numArray[i] * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">7</span> - i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉这道题还是很简单的，就是考试的时候想到了那个求某一位上数的方法，太兴奋导致忘了题目的反转，以后写完代码还是要细心的检查一下！然后如果各位看官有什么更好的解法的话，欢迎留言！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前天参加汇顶科技的笔试，最后一道编程题是求一个数的二进制表示反序后的值，例如10的二进制表示是0000 1010，反序后是0101 0000，十进制值是80。题目给的函数签名是：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; var)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;刚开始想到的肯定是用除2余和除2来算出所有位来咯。不过又想了一下，感觉这样做太水了，就想能不能用位运算来实现，想了一段时间后，终于想到可以用”按位与运算”和”移位运算”来求出某一位上是什么。例如要求低位起第二位就可以是：&lt;code&gt;num &amp;amp; (1 &amp;lt;&amp;lt; 1)&lt;/code&gt;。因为1左移1位就是&lt;code&gt;00000010&lt;/code&gt;，跟它做按位与运算，得出的就只剩下num的低位起的第二位了。然后再将这一位移到对称位上，即&lt;code&gt;cache &amp;lt;&amp;lt; 5&lt;/code&gt;(假设上面的运算得到的结果是cache)，得出&lt;code&gt;01000000&lt;/code&gt;（悲剧的是我当初忘记反转了！）。然后对每一位都这样处理就行了。下面给出实现代码（JavaScript实现，假设8位）：&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://lbbs.me/categories/programming/"/>
    
    
      <category term="JavaScript" scheme="http://lbbs.me/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://lbbs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>给定一个十进制整数N,求出从1到N的所有整数中出现1的个数</title>
    <link href="http://lbbs.me/2011/algorithm-count-one/"/>
    <id>http://lbbs.me/2011/algorithm-count-one/</id>
    <published>2011-09-24T13:33:00.000Z</published>
    <updated>2018-01-02T08:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天下午去参加汇顶科技的一面，8个人群面，给了一道题，题目就是文章标题。一开始的时候要求大家用10分钟将自己的想法写在一张纸上面，到时间后就收上去了。然后让我们发表一下各自的思想，并讨论。讨论开始的时候大家意见都很统一，就是用遍历或者递归来解决，很简单的一道题。面试官马上看出了情况，就加上了个条件，不使用递归或者遍历数字来实现。</p><p>大家在短暂的思考后，就开始讨论了，各种各样的想法，有些都没听明白，我自己的思想也没表达太清楚，在那里的时候也没想得很透彻，基本上没有解决掉问题。马上面试就结束了。回来的路上也一直在想这个问题，回到寝室后开始在电脑上编码，两三下就实现了。唉，压力下思考不灵活啊！下面就说一下我的实现方法：</p><a id="more"></a><p>遍历数字实现<br>遍历数字实现很简单，只要写一个循环从1到N遍历，然后分析当前数字中有多少个1，并加起来就行了，用JavaScript实现的，因为电脑刚重装系统，没有C语言环境。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOneCount</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, a, count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a = i;</span><br><span class="line">        <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a % <span class="number">10</span> == <span class="number">1</span>) count++;</span><br><span class="line">            a = <span class="built_in">parseInt</span>(a / <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的while循环就是分析每个数字中有多少个1，除10的余数，然后除10，直到变为0。我当时写的也是这个想法，不过不是写的代码。</p><p>探索规律实现<br>当时我的想法是：对于从1到N这N个数可以将其分解成：个位上共有多少个1，十位上共有多少个1……</p><p>然后对于给定的N，分析每一位上的数字，例如232可以分解成：1-200、1-30、1-2，这样1-2里面1的个数是1，1-30里面1的个数是<code>101(十位) + 3 * 100(个位)</code>，1-200里面1的个数是：<code>102(百位) + 2 * 101(十位) + 20 * 100(个位)=102 + 2*2*101</code></p><p>对于上面的例子如果当前分析位上是1，同一位上1的个数应该是<code>N除以10x(x是个位从0开始往前数)的余数+1</code>，例如132就是<code>32+1(100-132)</code>。</p><p>根据以上分析，可以得出：当前是第x+1位，数字是a，则<code>1-a*10x(232中百位上是：1-200)</code>中1的个数如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count = (a == <span class="number">1</span> ? (N % <span class="built_in">Math</span>.pow(<span class="number">10</span>,x) + <span class="number">1</span>) : <span class="built_in">Math</span>.pow(<span class="number">10</span>,x)) + a * x * <span class="built_in">Math</span>.pow(<span class="number">10</span>,x<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p>这里解释一下<code>a * x * Math.pow(10,x-1);</code>合并前是：<code>a * 10x-1 + a * 101 * 10x-2 + …… + a * 10x-2101 + a * 10x-1 * 100 = a * x * 10x-1</code>，其中每一项是<code>a * 10x-1-i * 10i</code>，表示分解后在<code>1-a*10x</code>中第i+1(右到左)位上是1的数字个数，其中<code>a * 10x-1-i</code>表示第i+1位的左边有多少种变化，10i表示第i+1位右边有多少种变化。相乘就是总共的变化数，即在<code>1-a*10x</code>区间，第i+1位是1的数字个数。</p><p>思想就讲到这里，不知道我表达清楚了没有。下面是实现代码(JavaScript)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOneCount</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span>,</span><br><span class="line">        a, t, count = <span class="number">0</span>;</span><br><span class="line">    t = n;</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="number">0</span>) &#123;</span><br><span class="line">        a = t % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            count += <span class="built_in">Math</span>.pow(<span class="number">10</span>, x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">            count += n % <span class="built_in">Math</span>.pow(<span class="number">10</span>, x) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count += a * x * <span class="built_in">Math</span>.pow(<span class="number">10</span>, x - <span class="number">1</span>);</span><br><span class="line">        t = <span class="built_in">parseInt</span>(t / <span class="number">10</span>);</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结<br>对于解法一的时间复杂度是<code>O(N × lgN)</code>，解法二的时间复杂度是<code>O(lgN)</code>。对于算法二，总结很重要。</p><p>大家还有什么其他更好的算法的话，欢迎留言！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天下午去参加汇顶科技的一面，8个人群面，给了一道题，题目就是文章标题。一开始的时候要求大家用10分钟将自己的想法写在一张纸上面，到时间后就收上去了。然后让我们发表一下各自的思想，并讨论。讨论开始的时候大家意见都很统一，就是用遍历或者递归来解决，很简单的一道题。面试官马上看出了情况，就加上了个条件，不使用递归或者遍历数字来实现。&lt;/p&gt;
&lt;p&gt;大家在短暂的思考后，就开始讨论了，各种各样的想法，有些都没听明白，我自己的思想也没表达太清楚，在那里的时候也没想得很透彻，基本上没有解决掉问题。马上面试就结束了。回来的路上也一直在想这个问题，回到寝室后开始在电脑上编码，两三下就实现了。唉，压力下思考不灵活啊！下面就说一下我的实现方法：&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://lbbs.me/categories/programming/"/>
    
    
      <category term="JavaScript" scheme="http://lbbs.me/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://lbbs.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>大学三年总结</title>
    <link href="http://lbbs.me/2011/three-years-of-collage/"/>
    <id>http://lbbs.me/2011/three-years-of-collage/</id>
    <published>2011-09-03T16:00:00.000Z</published>
    <updated>2018-01-02T08:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>时间一旦过去，就会感觉过得非常的快！三年前踏入南昌大学的种种情形还历历在目，两年前加入家园网时的笔试、面试也还清晰的映在脑海中，一年前开始跟家园网同事一起dota的种种情形，无法忘怀。而现在大四，要退出家园网，十分不舍。</p><a id="more"></a><p>还记得三年前刚踏入南昌大学时，对于有点路痴的我来说，这学校都快让我迷路了，感觉就是这学校实在有点大，这路比我们家那边的马路还宽呢！来到新生接待点，碰到一个同专业的新生，我们一起被一个学长带到了宿舍，看宿舍号的时候才知道我们竟然是一个宿舍的，缘份呐，有木有！第一个学期还是认真读书，晚上的话经常去图书馆上网，就是这段时间开始接触网赚，一开始是做调查，后来就接触到了懂懂写的书，开始了解了网站建设及利用网站来赚钱。第二学期来学校就开始筹备做网站了，下决心后，马上就买了域名和空间，那个时候用的是discuz来建站，弄了好久才把网站给建好了。不过当初对于网络的了解还是比较少的，网站主题想当然的选择了同学熟悉的“理财”，然后每天就是Ctrl+C和Ctrl+V，很累，没意思，又没流量。对这个网站的热情也越来越低，一个月后终于坚持不住了，重新思考该选什么做为网站的主题，最终选择了“大学生学习”，因为本身就是大学生。这个学期开始学习C语言了，发现对编程很感兴趣，所以这个学期基本上就宅在寝室里搞网站和写代码！也经常写一些计算机方面的文章放在网站上面，还有C语言方面的文章。期间也学习了网站的运营推广，还有SEO等。这个学期很快就过去了，而暑假基本上就宅在家里搞编程，两个月下来C语言进步了很多。哦，差点忘了大一还去过几次学校的英语角呢，呵呵……</p><p>很快就大二了。开学初在食堂门口看到家园网的招聘信息，就过去问了下，还说了我的网站，而那同学竟然知道，当时真的很兴奋呐！抱着打入他们网站内部以方便交换链接的目的报名了。在经过笔试、面试后，成功进入了家园网技术部。记忆中部长灰机对我很看重吧，说我C语言基础好，学C#的话应该很快，让我一个礼拜学会。当天就去图书馆借了相关书籍回寝室慢慢学习，开始学习面向对象等新的东西。当初也是不负期望啊，一个礼拜把C#的基础学完了，对面向对象也有一定的了解，不过对于数据库访问还是不大理解，只能死记数据库访问的步骤，然后每次写数据库访问就翻出来改改。这个学期基本上就是在学习，不过网站也没有荒废，流量不断上升。终于Google Adsense账户里面有了100美元，那时候的汇率还是6.8多呢。下学期在家园网的时间开始多了起来，后面跟着灰机做家园相册，在他的带领下学到了很多新的知识，尤其是面向对象方面。后来灰机有事就让我负责了相册的后续开发，相册托了很久，不过最后还是在规定的时间内完成了。在实践中学到了很多东西，尤其是在管理上面。很快这个学期也过去了，暑假留在学校，在家园网干活。这个暑假做了很多东西，也过得很有意思。期间做了新版的跳蚤市场，还有通行证中心，还有建行E路通比赛的官网等。暑假刚开始的时候和犀利邓一起去剃了个光头，后来犀利哥也剃了光头，波爷是还没放假就剃的光头，加起来家园网就有了四个光头，那时候我还留了一大把胡子呢，哈哈。7月份每天都和犀利哥还有犀利邓去游泳馆游泳，8月份就没有办游泳卡了，开始跟着他们一起打Dota，初学Dota的我，老被他们虐，不过有时也能极限逃生，当时玩的很high啊！有一次和犀利哥一起去散步，走了好远，从另一边绕回了学校。还有一次跟犀利哥竟然在一个小山包上玩蚂蚁，哈哈。还有在机房(家园网办公室俗称机房)煮面，大家抢面条，还有波爷、涛神熬夜看球赛，还有灰机和茄子的之间的暧昧。还有…………</p><p>大三时，担任了家园网技术部副部长，负责技术部程序组。就把大部分精力都放在家园网了，寝室成了睡觉专用，在机房通宵也是常有的事情。第一个学期主要在忙着技术部招新和新成员的培训工作。这个学期也做了一些其他的事情，破解了四六级查分的官网，实现批量查分，还在淘宝上帮一些忘记准考证号的同学查分。我淘宝信誉以及4心了呢，呵呵。还参加了Google举办的Android应用开发大赛，把四六级查分做成了Android应用，提交上去了，最后Google送了个Android机器人的书包，说实话这书包质量真不咋地，不过现在还用着呢。下学期的时候开始带新成员做东西了，主要是在改通行证中心。后来举办微博大赛，所以就用新浪微博的api做了一个比赛平台。这学期家园网举办了很多活动，宣传很给力啊。大三这年最多的就是跟波爷、小白、华鑫他们在机房dota啦，好怀念！暑假和华鑫去了上海，波爷也去了，不过后来波爷去了深圳腾讯实习，而我们就在上海实习。暑假的事情见暑假总结。</p><p>总结这三年来的大学生活，学到了很多东西，玩了些游戏，交了很多朋友，过得很充实！</p><p>时间过得真快，都大四了，还有不到一年的大学生活，想到一年后就要跟这许多朋友分别，各奔东西的时候，就会有些不舍，希望时间能过得慢一点，可这是不可能的！所以还是珍惜现在所剩的时光，把握现在，就像It’s My Life里面唱的一样，It’s my life,It’s now or never,I ain’t gonna live forever,I just want to live while I’m alive.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间一旦过去，就会感觉过得非常的快！三年前踏入南昌大学的种种情形还历历在目，两年前加入家园网时的笔试、面试也还清晰的映在脑海中，一年前开始跟家园网同事一起dota的种种情形，无法忘怀。而现在大四，要退出家园网，十分不舍。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://lbbs.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="总结" scheme="http://lbbs.me/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2011年暑假总结</title>
    <link href="http://lbbs.me/2011/2011-summer/"/>
    <id>http://lbbs.me/2011/2011-summer/</id>
    <published>2011-08-28T16:00:00.000Z</published>
    <updated>2018-01-02T08:57:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>逝者如斯夫，不舍昼夜。三年晃眼即过，不觉间已然大四了。</p><p>最后一个暑假选择了去父母所在的城市实习，一家创业公司，参与开发一个团队协作工具。虽然工资比较低，路程有点远，但是整个实习还是很有意思的。boss人很好，期间还带去天津出差，还有每周五下班前的dota，都让我记忆深刻。</p><a id="more"></a><p>还记得第一天上班的时候，由于对MVC不是很清楚，就在那边看MS官方的视频。前几天也没有安排什么工作，就是让先熟悉下MVC3。过了几天，安排做一个外包的网站，用他们的CMS改改就成了，比较简单。第二周才开始加入他们的核心产品开发，该项目所使用的框架是.net Mvc3 + .net Castle ActiveRecord + jQuery，而我在这三方面的基础都是比较差的，所以前期做起来还是有点吃力，Google的频率极其高。这个项目对用户体验要求很高，需要写大量的JS。记得比较清楚的是当初写的“图片上传与剪切”、“输入框高度自适应”、“TextArea的自动完成”等。期间也粗略的学了一下正则表达式，把原来的很多字符串处理换成了用正则表达式来处理。正则表达式的确很强大，这学期打算系统学习一下。</p><p>不记得是什么时候，boss问经常玩什么游戏，答案肯定是dota啰，呵呵。后来每周五下班之前就跟boss玩一两局dota。再过了段时间，boss带着去天津出差，去讨论一个已经谈好项目的具体细节。不过基本上都是boss自己谈的，我就是打打酱油。出差共六天，前两天跟对方吃饭，喝白酒，对于不会喝酒的我来说，简直就是噩梦啊！那白酒的味道实在受不了。不过还是忍着喝了一杯。吃完饭后，全身酸软，头特别晕，回酒店后就躺床上了，直到11点才起来洗澡，然后又睡觉。第二次的饭局，喝的是53度的白酒(上次是37度)，又是一杯，不过事后没前一天那么严重。每天白天去对方公司谈事情，晚上回来如果没事就跟boss一起dota，有时候太疯狂了，到了晚上12点还在dota，导致第二天起来感觉眼皮都是重重的。</p><p>出差回来后实习就只剩下最后一周了，这周前几天都在修复前面的bug，后几天就闲着。在最后的一次dota结束后，实习也就结束了。</p><p>总结这次实习学到了很多新的东西，不管是技术上的还是做人方面的，Micheal都给了很多指导性的建议。</p><p>最后感谢Michael、eric、larry给予了这次实习机会，祝你们公司蒸蒸日上！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;逝者如斯夫，不舍昼夜。三年晃眼即过，不觉间已然大四了。&lt;/p&gt;
&lt;p&gt;最后一个暑假选择了去父母所在的城市实习，一家创业公司，参与开发一个团队协作工具。虽然工资比较低，路程有点远，但是整个实习还是很有意思的。boss人很好，期间还带去天津出差，还有每周五下班前的dota，都让我记忆深刻。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://lbbs.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="总结" scheme="http://lbbs.me/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
